{"version":3,"sources":["components/cardgroup.js","components/instructions.js","App.js","serviceWorker.js","index.js"],"names":["Cardgroup","props","pictureCards","friends","map","friend","className","onClick","handleClick","key","id","alt","name","src","image","console","log","length","Instructions","App","state","currentscore","clicked","clickedArray","shuffle","i","j","temp","Math","floor","random","e","indexOf","target","setState","concat","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4pEAyBeA,MAtBf,SAAmBC,GAEjB,IAAMC,EAAeD,EAAME,QAAQC,IAAI,SAAAC,GAAM,OAC3C,yBAAKC,UAAU,OAAOC,QAASN,EAAMO,YAAaC,IAAKJ,EAAOK,IAC5D,yBAAKJ,UAAU,iBACb,yBACEK,IAAKN,EAAOO,KACZC,IAAKR,EAAOS,MACZJ,GAAIL,EAAOK,SAOnB,OAFAK,QAAQC,IAAI,UAAYd,EAAae,QAGnC,yBAAKX,UAAU,WACZJ,I,kCCVQgB,MAPf,WACI,OAAO,6BACH,kBAAC,IAAD,CAAWR,GAAG,YACV,6H,QCsEGS,E,2MApEbC,MAAQ,CACNC,aAAc,EACdC,QAAS,GACTC,aAAc,GACdpB,QAAQ,YAAKA,I,EAGfqB,QAAU,SAACtB,GACT,IAAIuB,EACFC,EACAC,EACF,IAAKF,EAAIvB,EAAae,OAAS,EAAGQ,EAAI,EAAGA,IACvCC,EAAIE,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCE,EAAOzB,EAAauB,GACpBvB,EAAauB,GAAKvB,EAAawB,GAC/BxB,EAAawB,GAAKC,EAEpB,OAAOzB,G,EAKTM,YAAc,SAACuB,GAGT,EAAKX,MAAMG,aAAaS,QAAQD,EAAEE,OAAOvB,IAAM,GACjDK,QAAQC,IAAI,6BACZD,QAAQC,IAAI,EAAKI,MAAMG,aAAaS,QAAQD,EAAEE,OAAOvB,KAErD,EAAKwB,SAAS,CACZb,aAAc,EAAKD,MAAMC,aAAe,EACxCC,QAASS,EAAEE,OAAOvB,GAClBa,aAAc,EAAKH,MAAMG,aAAaY,OAAOJ,EAAEE,OAAOvB,QAIxDK,QAAQC,IAAI,mBACZ,EAAKkB,SAAS,CACZb,aAAc,EACdC,QAAS,GACTC,aAAc,GACdpB,QAAQ,YAAKA,MAIjB,EAAK+B,SAAS,CAAE/B,QAAS,EAAKqB,QAAQ,EAAKJ,MAAMjB,Y,wEAIjD,OACE,yBAAKG,UAAU,OACb,kBAAC,IAAD,KACE,4CACA,yBAAKA,UAAU,2BAA2BI,GAAG,cAC3C,wBAAIJ,UAAU,sBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,YAAb,kBAAwC8B,KAAKhB,MAAMC,kBAK3D,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWlB,QAASiC,KAAKhB,MAAMjB,QAASK,YAAa4B,KAAK5B,YAAagB,QAASY,KAAKZ,e,GAhE3Ea,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e3a10da5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Cardgroup(props) {\n\n  const pictureCards = props.friends.map(friend =>\n    <div className=\"card\" onClick={props.handleClick} key={friend.id}>\n      <div className=\"img-container\">\n        <img\n          alt={friend.name}\n          src={friend.image}\n          id={friend.id}\n        />\n      </div>\n    </div>);\n\n  console.log(\"picture\" + pictureCards.length)\n\n  return (\n    <div className=\"wrapper\">\n      {pictureCards}\n    </div >\n  );\n}\n\nexport default Cardgroup;\n","import React from \"react\";\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nfunction Instructions() {\n    return <div>\n        <Jumbotron id=\"instruct\">\n            <h3>Click on an image to earn points, but don't click on an image more than once, or you lose!</h3></Jumbotron>\n    </div>;\n}\n\nexport default Instructions;","import React, { Component } from \"react\";\nimport Cardgroup from \"./components/cardgroup\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport Instructions from \"./components/instructions\";\nimport friends from \"./components/friends.json\";\n\nclass App extends Component {\n\n  state = {\n    currentscore: 0,\n    clicked: [],\n    clickedArray: [],\n    friends: [...friends]\n  };\n\n  shuffle = (pictureCards) => {\n    var i,\n      j,\n      temp;\n    for (i = pictureCards.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = pictureCards[i];\n      pictureCards[i] = pictureCards[j];\n      pictureCards[j] = temp;\n    }\n    return pictureCards;\n  };\n\n  // made an array to store each id of whats been clicked. then i will check against whats in the array\n\n  handleClick = (e) => {\n    // console.log(\"YO\" + e.target.id)\n\n    if (this.state.clickedArray.indexOf(e.target.id) < 0) {\n      console.log(\"hasnt been clicked before\")\n      console.log(this.state.clickedArray.indexOf(e.target.id))\n      // Cardgroup.shuffle()\n      this.setState({\n        currentscore: this.state.currentscore + 1,\n        clicked: e.target.id,\n        clickedArray: this.state.clickedArray.concat(e.target.id)\n      });\n    }\n    else {\n      console.log(\"already clicked\")\n      this.setState({\n        currentscore: 0,\n        clicked: [],\n        clickedArray: [],\n        friends: [...friends]\n      });\n    }\n\n    this.setState({ friends: this.shuffle(this.state.friends) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Navbar>\n          <h1>Clicky Game!</h1>\n          <div className=\"collapse navbar-collapse\" id=\"navbarMenu\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\">Current Score: {this.state.currentscore}</a>\n              </li>\n            </ul>\n          </div>\n        </Navbar>\n        <Instructions />\n        <Cardgroup friends={this.state.friends} handleClick={this.handleClick} shuffle={this.shuffle} />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}